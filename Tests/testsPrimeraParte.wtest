import jugador.*
import banco.*
import provincia.*
import campo.*
import juego.*

const provincia5      = new Provincia()
const dante  	      = new Jugador()
const provincia1      = new Provincia()
const campo1 	      = new Campo(valorDeCompra = 500, renta = 2000, provincia = provincia1, precioPorEstancia = 200)
const campo2 	      = new Campo(valorDeCompra = 200, renta = 10000, provincia = provincia1, precioPorEstancia = 100)
const fede 	 	 	  = new Jugador()
const empresaDelBanco = new Empresa(valorDeCompra =  600)
const campoDeFede 	  = new Campo(renta = 2000, valorDeCompra = 500, duenio = fede, precioPorEstancia = 300, provincia = provincia5)
const campoDeDante    = new Campo(renta = 2000, valorDeCompra = 500, duenio = dante, precioPorEstancia = 300, provincia = provincia5)
const empresaDeDante  = new Empresa(valorDeCompra =  600, duenio = dante)
const empresaDeFede   = new Empresa(valorDeCompra =  600, duenio = fede)
const juego	          = new Juego()
const tablero         = new Tablero()


describe "Punto 1"{

	method initialize(){
		provincia1.agregarCampo(campo1)
		provincia1.agregarCampo(campo2)
		dante.cobrar(5000)
	}
	
	test "obtengo los duenios de los campos, sólo el banco es duenio de todas las propiedades"{
		const duenios = provincia1.dueniosDeCampos()
		assert.equals(#{banco}, duenios)
	}
	
	test "obtengo duenios de los campos, el banco y dante son duenios"{
		campo2.duenio(dante)
		const duenios = provincia1.dueniosDeCampos()
		assert.equals(#{banco, dante}, duenios)
	}
	
	test "El campo1 no puede construir por que su provincia no es monopolio"{
		campo2.duenio(dante)
		assert.throwsExceptionWithType(noMonopolio,{campo1.construirEstancia()})
	}
	
	test "El campo1 no puede construir porque en su provincia no todos tienen menos o igual cantidad de estancias que él"{
		campo1.duenio(dante)
		campo2.duenio(dante)
		campo2.construirEstancia()
		assert.throwsExceptionWithType(noConstruccionPareja,{campo1.construirEstancia()})
	}
	
	test "El campo1 puede construir sin problemas y se le paga al banco"{
		campo1.duenio(dante)
		campo2.duenio(dante)
		assert.doesNotThrowException{campo1.construirEstancia()}
		assert.equals(4800, dante.dinero())
		assert.equals(200, banco.dinero())
	}

    test "El campo1 puede construir sin problemas, pero su duenio no puede pagarle al banco"{
        campo1.duenio(dante)
		campo2.duenio(dante)
        dante.pagar(5000)
		assert.throwsExceptionWithType(noPuedeRealizarElPago, {campo1.construirEstancia()})
    }
	
}

describe "Punto 2"{

	method initialize(){
		dante.agregarPropiedad(empresaDelBanco)
	}
	
	test "Las empresas entienden sosEmpresa() y da true"{
		assert.that(empresaDelBanco.sosEmpresa())
	}
	
	test "Los campos entienden sosEmpresa() y da false"{
		assert.notThat(campo1.sosEmpresa())
	}
	
	test "Dante tiene una empresa"{
		assert.equals(1, dante.cantidadEmpresasPropias())
	}
}

describe "Punto 3"{
	
	
	test "Dante tira un dado y da un numero entre 1 y 6 (entero)"{
		const valorDeDado = dante.tirarUnDado()
		assert.that(valorDeDado.between(1,6))
		assert.that(valorDeDado.isInteger())
	}
	
	test "Dante tira ambos dados obteniendo un valor entero entre 2 y 12"{
		const valorObtenido = dante.tirarDados()
		assert.that(valorObtenido.between(2,12))
		assert.that(valorObtenido.isInteger())
	}
}

describe "Punto 4"{
	
	method initialize(){
		fede.agregarPropiedad(empresaDelBanco)
	}
	
	test "dante debería pagar una renta de 2000 en el campo1 sin estancias"{
		assert.equals(2000, campo1.rentaPara(dante))
	}
	
	test "El campo1  me dice su renta teniendo 1 estancia, debería ser el doble"{
		campo1.duenio(fede)
		campo1.construirEstancia(1)
		assert.equals(4000, campo1.rentaPara(dante))
	}
	
	test "La empresa es de un duenio que sólo tiene una empresa y el valor a cobrar esta entre 60000 y 360000"{
		assert.that(empresaDelBanco.rentaPara(dante).between(60000, 360000))
	}
	
}

describe "Punto 5"{
	
	method initialize(){
		dante.cobrar(5000)
        banco.cobrar(5000)
	}
	
	test "dante paga al banco una suma que no lo supera económicamente"{
		assert.doesNotThrowException{dante.pagarA(banco, 500)}
		assert.equals(5500, banco.dinero())
        assert.equals(4500, dante.dinero())
	}
	
	test "dante le paga a fede una suma que no lo supera económicamente"{
		assert.doesNotThrowException{dante.pagarA(fede, 500)}
		assert.equals(500, fede.dinero())
        assert.equals(4500, dante.dinero())
	}
	
	test "dante le paga al banco una suma que lo supera económicamente y tira error"{
		assert.throwsExceptionWithType(noLoPuedePagar,{dante.pagarA(banco, 50000)})
		assert.equals(5000, banco.dinero())
	}
	
	test "dante le paga a fede una suma que lo supera económicamente y tira error"{
		assert.throwsExceptionWithType(noLoPuedePagar,{dante.pagarA(fede, 50000)})
		assert.equals(0, fede.dinero())
	}

    //Se podría testear si el banco le puede o no pagar a otro jugador, pero todavía eso no surgió en el enunciado

    test "el banco le paga a un jugador una suma que no lo supera económicamente"{
        assert.doesNotThrowException{banco.pagarA(dante, 500)}
        assert.equals(5500, dante.dinero())
        assert.equals(4500, banco.dinero())
    }

    test "el banco le paga a dante una suma que lo supera económicamente y tira error"{
		assert.throwsExceptionWithType(noLoPuedePagar,{banco.pagarA(dante, 50000)})
		assert.equals(5000, dante.dinero())
        assert.equals(5000, banco.dinero())
	}
	
}