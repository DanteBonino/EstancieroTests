import juego.*
import tablero.*
import jugador.*
import propiedad.*
import campo.*
import empresa.*
import casillerosEspeciales.*
import provincia.*
import excepciones.*
import estrategiasDeCompra.*
import estatus.*

class TiradorDeDobles inherits Jugador{
	override method tirarUnDado(){
		return 2
	}
}

class TiradorDeNoDobles inherits Jugador{
	override method tirarDadosUnaVez(){
		return 7
	}
}

const juego1 		   		  = new Juego()
const tableroDelJuego1 		  = juego1.tablero()
const dante            		  = new Jugador(juego = juego1, dinero = 2000)
const fede             		  = new Jugador(juego = juego1, dinero = 2000)
const bancoDelJuego1   		  = juego1.banco()
const salidaDelJuego1  		  = tableroDelJuego1.salida()
const premioGanaderoDelJuego1 = tableroDelJuego1.premioGanadero()
const prisionDelJuego1		  = tableroDelJuego1.prision()
const buenosAires			  = new Provincia()
const formosa				  = new Provincia()
const campoDeDante			  = new CampoV2(provincia = buenosAires, duenio = dante, valorDeRenta = 500, costoDeConstruccion = 500, valorDeCompra = 100, juego = juego1)
const campoDeFede			  = new CampoV2(provincia = formosa, duenio = fede, valorDeRenta = 500, costoDeConstruccion = 500, valorDeCompra = 100, juego = juego1)
const campoDelBanco			  = new CampoV2(provincia = buenosAires, duenio = bancoDelJuego1, valorDeRenta = 500, costoDeConstruccion = 200, valorDeCompra = 200, juego = juego1)
const empresaDeDante          = new EmpresaV2(duenio = dante, valorDeCompra = 100, juego = juego1)
const empresaDeFede           = new EmpresaV2(duenio = fede, valorDeCompra = 200, juego = juego1)
const empresaDelBanco         = new EmpresaV2(duenio = bancoDelJuego1, valorDeCompra = 300, juego = juego1)
const tiradorDeDobles		  = new TiradorDeDobles(juego = juego1)
const tiradorDe7			  = new TiradorDeNoDobles(juego = juego1)
const empresaDelBancoCara	  = new EmpresaV2(duenio = bancoDelJuego1, valorDeCompra = 50000, juego = juego1)
const campoDelEjemplo		  = new CampoV2(provincia = buenosAires, duenio = bancoDelJuego1, valorDeRenta = 500, costoDeConstruccion = 100, valorDeCompra = 200, juego = juego1, cantidadDeEstancias = 2, estatus = hipotecada)
const campoNoHipotecadoDe500  = new CampoV2(provincia = buenosAires, duenio = bancoDelJuego1, valorDeRenta = 500, costoDeConstruccion = 100, valorDeCompra = 500, juego = juego1)
describe "Punto 1" {
	
	method initialize(){
		
	}
	
	test "dante cae en la prision y sólo cambia su posicion" {
		prisionDelJuego1.cayo(dante)
		assert.that(dante.esSuPosicionActual(prisionDelJuego1))
		assert.equals(2000, dante.dinero())
	}
	
	test "dante pasa por la prision y no pasa nada"{
		prisionDelJuego1.paso(dante)
		assert.notThat(dante.esSuPosicionActual(prisionDelJuego1))
		assert.equals(2000, dante.dinero())
	}
	
	test "dante va preso"{
		dante.irPreso()
		assert.equals(3, dante.turnosRestantesEnPrision())
		assert.that(dante.esSuPosicionActual(prisionDelJuego1))
	}
	
	test "Un jugador termina preso si, jugando, saca dos dobles seguidos"{
		tiradorDeDobles.jugar()
		assert.equals(3, tiradorDeDobles.turnosRestantesEnPrision())
		assert.that(tiradorDeDobles.esSuPosicionActual(prisionDelJuego1))
		
	}
	
	test "Un jugador libre, si no saca dobles, juega normalmente"{
		assert.doesNotThrowException({tiradorDe7.jugar()})
		assert.that(tiradorDe7.esSuPosicionActual(salidaDelJuego1))
	}
	test "Un jugador está preso, no saca dobles y todavía no pasaron 3 turnos, entonces no deja de estar preso"{
		tiradorDe7.irPreso()
		tiradorDe7.jugar()
		assert.equals(2, tiradorDe7.turnosRestantesEnPrision())
		assert.that(tiradorDe7.esSuPosicionActual(prisionDelJuego1))
	}
	
	test "Un Jugador está preso y saca dobles, entonces se mueve"{
		
	}
	
	test "Un Jugador está preso, se juegan 3 turnos y pasa a dejar de estarlo"{
		
	}
}

describe "Punto 2"{
	method initialize(){
		dante.cobrar(3000)
		buenosAires.agregarCampo(campoDelBanco)
		bancoDelJuego1.agregarPropiedad(campoDelBanco)
		bancoDelJuego1.agregarPropiedad(empresaDelBanco)
		juego1.agregarJugador(fede)
		juego1.agregarJugador(dante)
	}
	
	test "Un jugador con la estrategia estandar cae en un campo del banco y lo compra"{
		campoDelBanco.cayo(dante)
		assert.equals(4800, dante.dinero())
		assert.that(dante.tienePropiedad(campoDelBanco))
		assert.notThat(bancoDelJuego1.tienePropiedad(campoDelBanco))
		
	}
	
	test "Un jugador con la estrategia estandar cae en una empresa del banco y la compra"{
		empresaDelBanco.cayo(dante)
		assert.equals(4700, dante.dinero())
		assert.that(dante.tienePropiedad(empresaDelBanco))
		assert.notThat(bancoDelJuego1.tienePropiedad(empresaDelBanco))
	}
	
	test "Un jugador con la estrategia garca cae en un campo del banco y lo compra"{
		dante.estrategiaDeCompra(garca)
		campoDeFede.asignarProvincia(buenosAires)
		buenosAires.agregarCampo(campoDeFede)
		campoDelBanco.cayo(dante)
		assert.equals(4800, dante.dinero())
		assert.that(dante.tienePropiedad(campoDelBanco))
		assert.notThat(bancoDelJuego1.tienePropiedad(campoDelBanco))
	}
	
	test "Un jugador con la estrategia garca cae en un campo del banco y no lo compra pq ningún otro jugador tiene campos en la provincia del mismo"{
		dante.estrategiaDeCompra(garca)
		assert.throwsExceptionWithMessage("Ningun otro jugador tiene campos en la provincia del mismo", {campoDelBanco.cayo(dante)})
		assert.notThat(dante.tienePropiedad(campoDelBanco))
		assert.equals(5000, dante.dinero())
		assert.that(bancoDelJuego1.tienePropiedad(campoDelBanco))
	}
	
	test "Un jugador con la estrategia garca cae en una empresa del banco y no la compra pq ningún otro jugador tiene alguna empresa"{
		dante.estrategiaDeCompra(garca)
		bancoDelJuego1.agregarPropiedad(empresaDeDante)
		bancoDelJuego1.agregarPropiedad(empresaDeFede)
		assert.throwsExceptionWithMessage("No hay ningún otro jugador que sea dueño de alguna empresa, por ende no compra la empresa", {empresaDelBanco.cayo(dante)})
		assert.notThat(dante.tienePropiedad(empresaDelBanco))
		assert.equals(5000, dante.dinero())
		assert.that(bancoDelJuego1.tienePropiedad(empresaDelBanco))
	}
	
	test "Un jugador con la estrategia imperialista cae en un campo del banco y lo compra pq  ya tiene otro campo en la provincia"{
		dante.estrategiaDeCompra(imperialista)
		dante.agregarPropiedad(campoDeDante)
		buenosAires.agregarCampo(campoDeDante)
		campoDelBanco.cayo(dante)
		assert.equals(4800, dante.dinero())
		assert.that(dante.tienePropiedad(campoDelBanco))
		assert.notThat(bancoDelJuego1.tienePropiedad(campoDelBanco))
	}
	
	test "Un jugador con la estrategia imperialista cae en un campo del banco y lo compra pq la provincia es un monopolio del banco"{
		dante.estrategiaDeCompra(imperialista)
		bancoDelJuego1.agregarPropiedad(campoDeDante)
		buenosAires.agregarCampo(campoDeDante)
		campoDelBanco.cayo(dante)
		assert.equals(4800, dante.dinero())
		assert.that(dante.tienePropiedad(campoDelBanco))
		assert.notThat(bancoDelJuego1.tienePropiedad(campoDelBanco))
	}
	
	test "Un jugador con la estrategia imperialista cae en una empresa del banco y la compra"{
		dante.estrategiaDeCompra(imperialista)
		bancoDelJuego1.agregarPropiedad(empresaDeDante)
		bancoDelJuego1.agregarPropiedad(empresaDeFede)
		empresaDelBanco.cayo(dante)
		assert.equals(4700, dante.dinero())
		assert.that(dante.tienePropiedad(empresaDelBanco))
		assert.notThat(bancoDelJuego1.tienePropiedad(empresaDelBanco))
	}
	
	test "Un jugador con la estrategia imperialista cae en un campo del banco y no lo compra pq no se cumplen las condiciones adecuadas"{
		dante.estrategiaDeCompra(imperialista)
		campoDeFede.asignarProvincia(buenosAires)
		buenosAires.agregarCampo(campoDeFede)
		assert.throwsExceptionWithMessage("La propiedad no cumple las condiciones adecuadas para ser comprada por el jugador", {campoDelBanco.cayo(dante)})
		assert.notThat(dante.tienePropiedad(campoDelBanco))
		assert.equals(5000, dante.dinero())
		assert.that(bancoDelJuego1.tienePropiedad(campoDelBanco))
	}
	
	test "Un jugador con la estrategia imperialista cae en una empresa del banco y no la compra pq las empresas no son un monopolio del banco"{
		dante.estrategiaDeCompra(imperialista)
		fede.agregarPropiedad(empresaDeFede)
		assert.throwsExceptionWithMessage("Las empresas no son todas del banco, por ende no compra la empresa", {empresaDelBanco.cayo(dante)})
		assert.notThat(dante.tienePropiedad(empresaDelBanco))
		assert.equals(5000, dante.dinero())
		assert.that(bancoDelJuego1.tienePropiedad(empresaDelBanco))
	}
	
}

describe "Punto 3"{
	method initialize(){
		dante.cobrar(3000)
		bancoDelJuego1.cobrar(5000)
		bancoDelJuego1.agregarPropiedad(empresaDelBanco)
		bancoDelJuego1.agregarPropiedad(empresaDelBancoCara)
		bancoDelJuego1.agregarPropiedad(campoDelBanco)
		bancoDelJuego1.agregarPropiedad(campoNoHipotecadoDe500)
		fede.agregarPropiedad(campoDeFede)
		fede.agregarPropiedad(empresaDeFede)
	}
	
	test "dante paga al banco una suma que no lo supera económicamente"{
		assert.doesNotThrowException{dante.pagarA(bancoDelJuego1, 500)}
		assert.equals(5500, bancoDelJuego1.dinero())
        assert.equals(4500, dante.dinero())
	}
	
	test "dante le paga a fede una suma que no lo supera económicamente"{
		assert.doesNotThrowException{dante.pagarA(fede, 500)}
		assert.equals(2500, fede.dinero())
        assert.equals(4500, dante.dinero())
	}
	
	test "dante le paga al banco una suma que lo supera económicamente y tira error, no tiene propiedades para hipotecar"{
		assert.throwsExceptionWithType(noPuedeRealizarElPago,{dante.pagarA(bancoDelJuego1, 50000)})
		assert.equals(5000, bancoDelJuego1.dinero())
	}
	
	test "dante le paga a fede una suma que lo supera económicamente y tira error, no tiene propiedades para hipotecar"{
		assert.throwsExceptionWithType(noPuedeRealizarElPago,{dante.pagarA(fede, 50000)})
		assert.equals(2000, fede.dinero())
	}
	
	test "dante le paga al banco una suma que lo supera inicialmente económicamente, pero hipotecando logra pagarle"{
		dante.agregarPropiedad(campoNoHipotecadoDe500)
		dante.pagar(5000)
		assert.doesNotThrowException{dante.pagarA(bancoDelJuego1, 100)}
		assert.notThat(campoNoHipotecadoDe500.estaLibre())
		assert.notThat(dante.tienePropiedad(campoNoHipotecadoDe500))
		assert.that(bancoDelJuego1.tienePropiedad(campoNoHipotecadoDe500))
		assert.equals(150, dante.dinero())
	}
	
	test "dante le paga a fede una suma que lo supera inicialmente económicamente, pero hipotecando logra pagarle"{
		dante.agregarPropiedad(campoNoHipotecadoDe500)
		dante.pagar(5000)
		assert.doesNotThrowException{dante.pagarA(fede, 100)}
		assert.notThat(campoNoHipotecadoDe500.estaLibre())
		assert.notThat(dante.tienePropiedad(campoNoHipotecadoDe500))
		assert.that(bancoDelJuego1.tienePropiedad(campoNoHipotecadoDe500))
		assert.equals(150, dante.dinero())
	}

    //Se podría testear si el banco le puede o no pagar a otro jugador, pero todavía eso no surgió en el enunciado

    test "el banco le paga a un jugador una suma que no lo supera económicamente"{
        assert.doesNotThrowException{bancoDelJuego1.pagarA(dante, 500)}
        assert.equals(5500, dante.dinero())
        assert.equals(4500, bancoDelJuego1.dinero())
    }

    test "el banco le paga a dante una suma que lo supera económicamente y tira error"{
		assert.throwsExceptionWithType(noPuedeRealizarElPago,{bancoDelJuego1.pagarA(dante, 50000)})
		assert.equals(5000, dante.dinero())
        assert.equals(5000, bancoDelJuego1.dinero())
	}
	
	
	test "Un Jugador cae en un campo del banco, lo puede pagar, entonces lo compra normalmente"{
		campoDelBanco.cayo(dante)
		assert.equals(4800, dante.dinero())
		assert.equals(5200, bancoDelJuego1.dinero())
		assert.that(dante.tienePropiedad(campoDelBanco))
		assert.notThat(bancoDelJuego1.tienePropiedad(campoDelBanco))
	}
	
	test "Un Jugador cae en una empresa del banco, la puede pagar, entonces la compra normalmente"{
		empresaDelBanco.cayo(dante)
		assert.equals(4700, dante.dinero())//Cambiar el 0 por el valor que debería ir
		assert.equals(5300, bancoDelJuego1.dinero())
		assert.that(dante.tienePropiedad(empresaDelBanco))
	}
	
	test "Un Jugador intenta comprar una propiedad que excede su nivel de vida, y no tiene propiedades para hipotecar, entonce no la compra"{
		assert.throwsExceptionWithMessage("El acreedor no puede realizar el pago correspondiente debido a que su saldo es insuficiente", {empresaDelBancoCara.cayo(dante)})
		assert.that(dante.dinero() < empresaDelBancoCara.valorDeCompra())
		assert.that(bancoDelJuego1.tienePropiedad(empresaDelBancoCara))
		assert.notThat(dante.tienePropiedad(empresaDelBancoCara))
	}
	
	test "Una empresa se encuentra hipotecada, entonces su valor de compra actual es su valorDeCompra original * 1.5"{
		empresaDelBanco.hipotecar()
		assert.equals(300 * 1.5, empresaDelBanco.valorDeCompraActual())
	}
	
	test "Un campo cuyo valor de compra original es 200 si se lo hipoteca pasa a valer 300"{
		assert.equals(300, campoDelEjemplo.valorDeCompraActual())
	}
	
	test "El valor que debe pagarle al jugador el banco por la hipoteca de una empresa cuyo costo de compra es 300 es igual a 150"{
		assert.equals(150, empresaDelBanco.valorDeHipoteca())
	}
	
	test "Un campo cuyo valor de compra original es 200 y el costo de construccion es 100, teniendo 2 estancias tiene un valor de hipoteca de 200"{
		assert.equals(200, campoDelEjemplo.valorDeHipoteca())
	}
	
	test "Un Jugador cae en un campo hipotecado y le alcanza para pagarlo, entonces lo compra y deja de estar hipotecado"{
		campoDelEjemplo.cayo(dante)
		assert.equals(4700, dante.dinero())
		assert.that(dante.tienePropiedad(campoDelEjemplo))
		assert.that(campoDelEjemplo.estaLibre())
	}
	
	test "Un Jugador cae en una empresa hipotecada y le alcanza para pagarla, entonces la compra y deja de estar hipotecada"{
		empresaDelBanco.hipotecar()
		empresaDelBanco.cayo(dante)
		assert.equals(4550, dante.dinero())
		assert.that(dante.tienePropiedad(empresaDelBanco))
		assert.that(empresaDelBanco.estaLibre())
		assert.notThat(bancoDelJuego1.tienePropiedad(empresaDelBanco))
	}
	
	test "Un Jugador cae en un campo, no le alcanza para pagarlo, entonces hipoteca x propiedades hasta poder comprarlo"{
		campoDelEjemplo.liberar()
		dante.pagar(5000)
		dante.agregarPropiedad(campoDeDante)
		dante.agregarPropiedad(campoDelBanco)
		dante.agregarPropiedad(campoDeFede)
		assert.doesNotThrowException({campoDelEjemplo.cayo(dante)})
		assert.that(dante.dinero() == 0)
		assert.that(dante.tienePropiedad(campoDelEjemplo))
		assert.that(campoDelEjemplo.estaLibre())
	}
	
	
	test "Un Jugador cae en un campo hipotecado, no le alcanza para pagarlo, entonces hipoteca x propiedades hasta poder comprarlo"{
		dante.pagar(5000)
		dante.agregarPropiedad(campoDeDante)
		dante.agregarPropiedad(campoDelBanco)
		dante.agregarPropiedad(campoDeFede)
		dante.agregarPropiedad(campoNoHipotecadoDe500)
		assert.doesNotThrowException({campoDelEjemplo.cayo(dante)})
		assert.that(dante.dinero() >= 0)
		assert.that(dante.tienePropiedad(campoDelEjemplo))
		assert.that(campoDelEjemplo.estaLibre())
	}
	
	test "Un Jugador cae en una empresa, no le alcanza para pagarla, entonces hipoteca x propiedades hasta poder comprarla"{
		dante.pagar(5000)
		dante.agregarPropiedad(campoNoHipotecadoDe500)
		dante.agregarPropiedad(campoDeFede)
		assert.doesNotThrowException({empresaDelBanco.cayo(dante)})
		assert.equals(0, dante.dinero())
		assert.that(dante.tienePropiedad(empresaDelBanco))
		assert.notThat(bancoDelJuego1.tienePropiedad(empresaDelBanco))
		assert.notThat(dante.tienePropiedad(campoNoHipotecadoDe500))
		assert.notThat(dante.tienePropiedad(campoDeFede))
	}
	
	test "Un Jugador cae en una empresa hipotecada, no le alcanza para pagarla, entonces hipoteca x propiedades hasta poder comprarla"{
		dante.pagar(5000)
		empresaDelBanco.hipotecar()
		dante.agregarPropiedad(campoNoHipotecadoDe500)//250
		dante.agregarPropiedad(campoDeFede)//50
		dante.agregarPropiedad(campoDeDante)//50
		dante.agregarPropiedad(campoDelBanco)//100
		assert.doesNotThrowException({empresaDelBanco.cayo(dante)})
		assert.equals(0, dante.dinero())
		assert.that(dante.tienePropiedad(empresaDelBanco))
		assert.that(empresaDelBanco.estaLibre())
		assert.notThat(bancoDelJuego1.tienePropiedad(empresaDelBanco))
		assert.notThat(dante.tienePropiedad(campoNoHipotecadoDe500))
		assert.notThat(dante.tienePropiedad(campoDeDante))
		assert.notThat(dante.tienePropiedad(campoDeFede))
		assert.notThat(dante.tienePropiedad(campoDelBanco
			
		))
	}
	
	test "Un Jugador cae en un campo, no le alcanza para pagarlo, entonces hipoteca x propiedades hasta poder comprarlo, pero no le alcanza"{
		dante.pagar(5000)
		dante.agregarPropiedad(campoDeDante)
		assert.throwsExceptionWithType(noPuedeRealizarElPago, {campoNoHipotecadoDe500.cayo(dante)})
		assert.equals(50, dante.dinero())//Cobra la hipoteca y no la usa pq no le alcanza
		assert.notThat(dante.tienePropiedad(campoDeDante))
		assert.notThat(dante.tienePropiedad(campoNoHipotecadoDe500))
		assert.that(bancoDelJuego1.tienePropiedad(campoNoHipotecadoDe500))
		assert.that(bancoDelJuego1.tienePropiedad(campoDeDante))
		assert.notThat(campoDeDante.estaLibre())
	}
	
	test "Un Jugador cae en un campo hipotecado, no le alcanza para pagarlo, entonces hipoteca x propiedades hasta poder comprarlo, pero no le alcanza"{
		dante.pagar(5000)
		campoNoHipotecadoDe500.hipotecar()
		dante.agregarPropiedad(campoDeDante)
		assert.throwsExceptionWithType(noPuedeRealizarElPago, {campoNoHipotecadoDe500.cayo(dante)})
		assert.equals(50, dante.dinero())//Cobra la hipoteca y no la usa pq no le alcanza
		assert.notThat(dante.tienePropiedad(campoDeDante))
		assert.notThat(dante.tienePropiedad(campoNoHipotecadoDe500))
		assert.that(bancoDelJuego1.tienePropiedad(campoNoHipotecadoDe500))
		assert.that(bancoDelJuego1.tienePropiedad(campoDeDante))
		assert.notThat(campoDeDante.estaLibre())
	}
	
	test "Un Jugador cae en una empresa, no le alcanza para pagarla, entonces hipoteca x propiedades hasta poder comprarla, pero no le alcanza"{
		dante.pagar(5000)
		dante.agregarPropiedad(campoDeDante)
		assert.throwsExceptionWithType(noPuedeRealizarElPago, {empresaDelBanco.cayo(dante)})
		assert.equals(50, dante.dinero())
		assert.notThat(dante.tienePropiedad(empresaDelBanco))
		assert.notThat(dante.tienePropiedad(campoDeDante))
		assert.that(empresaDelBanco.estaLibre())
		assert.that(bancoDelJuego1.tienePropiedad(empresaDelBanco))
	}
	
	test "Un Jugador cae en una empresa hipotecada, no le alcanza para pagarla, entonces hipoteca x propiedades hasta poder comprarla, pero no le alcanza"{
		dante.pagar(5000)
		empresaDelBanco.hipotecar()
		dante.agregarPropiedad(campoDeDante)
		assert.throwsExceptionWithType(noPuedeRealizarElPago, {empresaDelBanco.cayo(dante)})
		assert.equals(50, dante.dinero())
		assert.notThat(dante.tienePropiedad(empresaDelBanco))
		assert.notThat(dante.tienePropiedad(campoDeDante))
		assert.notThat(empresaDelBanco.estaLibre())
		assert.that(bancoDelJuego1.tienePropiedad(empresaDelBanco))
	}
}